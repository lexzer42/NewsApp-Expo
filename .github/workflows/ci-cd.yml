name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'pnpm'
          
      - name: Install pnpm
        run: npm install -g pnpm
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Run ESLint
        run: pnpm lint
        env:
          CI: true
      
      - name: Run Prettier check
        run: pnpm format:check
        env:
          CI: true

  deploy-prod:
    if: |
      (github.ref == 'refs/heads/main' || github.event_name == 'pull_request') &&
      github.event_name != 'pull_request_target'
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necesario para tags
      
      - name: Deploy to Expo
        run: echo "Aquí iría el comando para desplegar a Expo"
      
      - name: Generate SemVer Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configurar git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Obtener último tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          
          # Incrementar versión (patch)
          NEW_VERSION=$(echo $LATEST_TAG | awk -F. '{$NF+=1; OFS="."; print $0}')
          
          # Crear y pushear nuevo tag
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
          
          echo "Nuevo tag creado: $NEW_VERSION"
